---
import '@/styles/global.css'

import { pwaInfo } from 'virtual:pwa-info';

interface Props {
	title: string;
	description?: string;
}

const { title, description } = Astro.props;
---

<!doctype html>
<html lang="id">
	<head>
		<meta charset="UTF-8" />
		{description && <meta name="description" content={description} />}
		<meta name="viewport" content="width=device-width" />
	  <meta name="theme-color" content="#0074d9" />

		<link rel="icon" type="image/x-icon" href="/favicon.ico" />

		<meta name="generator" content={Astro.generator} />
		
		<title>{title}</title>
		
		<script is:inline>
			const getThemePreference = () => {
				if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
					return localStorage.getItem('theme');
				}
				return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
			};
			const isDark = getThemePreference() === 'dark';
			document.documentElement.classList[isDark ? 'add' : 'remove']('dark');
		
			if (typeof localStorage !== 'undefined') {
				const observer = new MutationObserver(() => {
					const isDark = document.documentElement.classList.contains('dark');
					localStorage.setItem('theme', isDark ? 'dark' : 'light');
				});
				observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
			}
		</script>

		    { pwaInfo && <Fragment set:html={pwaInfo.webManifest.linkTag} /> }
	</head>
	 <body>
		 <slot />
		 <script src="../pwa.ts"></script>
	</body>
</html>
